// ------------------------------------------------------------------------------------------------ //
// @ file	 : Map.cpp                                                                              //
// @ brief	 : マップに関するクラス                                                                 //
// @ date	 : 2017/06/25                                                                           //
// @ author  : Madoka Nakajima                                                                      //
// @ note	 :                                                                                      //
// ------------------------------------------------------------------------------------------------ // 
/* ヘッダファイルのインクルード */
// 先生のフレームワーク
#include "../../ImaseLib/Direct3D.h"
#include "../../ImaseLib/DirectXTK.h"
// 自作ヘッダファイル
#include "Map.h"

/* 名前空間 */
using namespace DirectX::SimpleMath;

/* メンバ関数の定義 */
// ----------------------------------------------------------------------------------------------- //
// @ brief	: 引数付きコンストラクタ                                                               //
// @ param	: int width...クライアント領域の幅                                                     //
// @ param	: int height...クライアント領域の高さ                                                  //
// @ return : なし                                                                                 //
// @ note	:                                                                                      //
// ----------------------------------------------------------------------------------------------- // 
Map::Map(int width, int height)
	:mWidth(width)
	, mHeight(height)
{
	/*
		マップ生成
		new MapChip* -> マップチップのポインタの配列を動的確保
		width * height -> 二次元配列を一次元配列に変換
	*/
	mMapChip = new MapChip*[width*height];
}

// ----------------------------------------------------------------------------------------------- //
// @ brief	: デストラクタ                                                                         //
// @ param	: なし                                                                                 //
// @ return : なし                                                                                 //
// @ note	:                                                                                      //
// ----------------------------------------------------------------------------------------------- // 
Map::~Map()
{
	// マップチップの破棄
	delete[] mMapChip;
}

// ----------------------------------------------------------------------------------------------- //
// @ brief	: マップチップをマップの配列に格納                                                     //
// @ param	: int x...たて                                                                         //
// @ param	: int y...よこ                                                                         //
// @ param	: MapChip* chip...マップチップを指すポインタ                                           //
// @ return : なし                                                                                 //
// @ note	:                                                                                      //
// ----------------------------------------------------------------------------------------------- // 
void Map::Set(int x, int y, MapChip* chip)
{
	// 二次元配列の添え字から一次元配列の添え字にする
	int id = ToIndex(x, y);
	// 配列にマップチップのポインタを代入
	mMapChip[id] = chip;
}

// ----------------------------------------------------------------------------------------------- //
// @ brief	: 二次元配列の添え字から一次元配列の添え字にする                                       //
// @ param	: int x...たて                                                                         //
// @ param	: int y...よこ                                                                         //
// @ return : int...一次元配列の添え字                                                             //
// @ note	:                                                                                      //
// ----------------------------------------------------------------------------------------------- // 
int Map::ToIndex(int x, int y)
{
	// 一次元配列の添え字にする
	int index = x + (mWidth * y);
	return index;
}

// ----------------------------------------------------------------------------------------------- //
// @ brief	: 描画                                                                                 //
// @ param	: Matrix view...ビュー行列                                                             //
// @ param	: Matrix proj...射影行列                                                               //
// @ return : なし                                                                                 //
// @ note	:                                                                                      //
// ----------------------------------------------------------------------------------------------- // 
void Map::Draw(Matrix view, Matrix proj)
{
	for (int i = 0; i < mHeight; i++)
	{
		for (int j = 0; j < mWidth; j++)
		{
			// 二次元配列の添え字から一次元配列の添え字にする
			MapChip* mapchip = mMapChip[ToIndex(j, i)];
			// mapChipに何か入ってたら(mapChipが穴以外だったら)
			if (mapchip != nullptr)
			{
				//　モデルを取得する
				auto model = mapchip->GetModel();
				// ワールド行列の計算
				Matrix world = Matrix::CreateTranslation(Vector3(j - (mWidth / 2.0f) + 0.5f, 0, i - (mHeight / 2.0f) + 0.5f));
				// 描画
				model->Draw(g_pImmediateContext.Get(), *g_state, world, view, proj);
			}

		}
	}
}

// ----------------------------------------------------------------------------------------------- //
// @ brief	: 座標を取得                                                                           //
// @ param	: マップチップの番号                                                                   //
// @ param	: オフセットで引いてる分（－の値を入れておく）                                         //
// @ return : DirectX::SimpleMath::Vector3...マップチップの番号からオフセットで引いた座標          //
// @ note	:                                                                                      //
// ----------------------------------------------------------------------------------------------- // 
Vector3 Map::GetPos(int x, int z, int ox, int oz)
{
	// OFFSET引いた分を足す
	x += ox;
	z += oz;
	return Vector3((float)x, 0.0f, (float)z);
}

// ----------------------------------------------------------------------------------------------- //
// @ brief	: 座標をランダムで取得                                                                 //
// @ param	: マップチップの番号                                                                   //
// @ param	: オフセットで引いてる分（－の値を入れておく）                                         //
// @ return : DirectX::SimpleMath::Vector3...ランダムで求めた値からオフセットを引いた座標          //
// @ note	:                                                                                      //
// ----------------------------------------------------------------------------------------------- // 
Vector3 Map::GetRandomPos(int x, int z, float ox, float oz)
{
	// ランダム値を格納する
	float px;
	float pz;

	// オブジェクトの中心
	float cx;
	float cz;

	// オブジェクトの中心を計算（オブジェクトの幅 / ２．０ｆ）
	cx = 1.0f / 2.0f;
	cz = 1.0f / 2.0f;

	/*
		ランダムを生成
		乱数からステージの幅か奥行きを余りを求め、OFFSETを足す。
		OFFSETは-の値を入れてる。
	 */
	  int xx = rand() % x;
	  int zz = rand() % z;
	  px = xx - ox + cx;
	  pz = zz - oz + cz;

	// 結果を格納
	Vector3 result = Vector3(px, 0, pz);

	return result;
}

// ----------------------------------------------------------------------------------------------- //
// @ brief	: 引数で指定した配列の要素の属性を取得                                                 //
// @ param	: int x...たて                                                                         //
// @ param	: int y...よこ                                                                         //
// @ return : 引数で指定した配列の要素の属性                                                       //
// @ note	:                                                                                      //
// ----------------------------------------------------------------------------------------------- // 
int Map::GetAttribute(int x, int z)
{
	return mMapChip[ToIndex(x, z)]->GetAttribute();
}
